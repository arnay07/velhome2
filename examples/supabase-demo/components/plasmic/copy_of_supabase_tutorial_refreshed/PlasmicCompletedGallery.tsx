// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uQ1tStPUiuweYuxMksqyYP
// Component: 2Yp4G7Qp0jQKO0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: _URXLOJYdHqND/component
import { SupabaseGrid } from "../../CodeComponents/DisplayCollections"; // plasmic-import: 0GvVx7wRRBWZSF/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import { SupabaseField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: ErRkFjcoSr3iR5/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: uQ1tStPUiuweYuxMksqyYP/projectcss
import sty from "./PlasmicCompletedGallery.module.css"; // plasmic-import: 2Yp4G7Qp0jQKO0/css

export type PlasmicCompletedGallery__VariantMembers = {};

export type PlasmicCompletedGallery__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompletedGallery__VariantsArgs;
export const PlasmicCompletedGallery__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCompletedGallery__ArgsType = {};
type ArgPropType = keyof PlasmicCompletedGallery__ArgsType;
export const PlasmicCompletedGallery__ArgProps = new Array<ArgPropType>();

export type PlasmicCompletedGallery__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  supabaseGrid?: p.Flex<typeof SupabaseGrid>;
  tilt?: p.Flex<typeof Tilt>;
  text?: p.Flex<"div">;
};

export interface DefaultCompletedGalleryProps {}

export const defaultCompletedGallery__Args: Partial<PlasmicCompletedGallery__ArgsType> =
  {};

function PlasmicCompletedGallery__RenderFunc(props: {
  variants: PlasmicCompletedGallery__VariantsArgs;
  args: PlasmicCompletedGallery__ArgsType;
  overrides: PlasmicCompletedGallery__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultCompletedGallery__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
            onCompletedGallery={true}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___806Ok)}>
              <SupabaseGrid
                data-plasmic-name={"supabaseGrid"}
                data-plasmic-override={overrides.supabaseGrid}
                className={classNames("__wab_instance", sty.supabaseGrid)}
                loading={
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {
                      "Loading...\nIf this persists, please log in to the application first."
                    }
                  </div>
                }
                tableColumns={["name", "imageUrl"]}
                tableName={"entries" as const}
              >
                <Tilt
                  data-plasmic-name={"tilt"}
                  data-plasmic-override={overrides.tilt}
                  className={classNames("__wab_instance", sty.tilt)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oVn23)}
                    >
                      <SupabaseField
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseField__s8TTs
                        )}
                        selector={"{{row.imageUrl}}" as const}
                        type={"image" as const}
                      />

                      <SupabaseField
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseField__o3UiH
                        )}
                        selector={"{{row.name}}" as const}
                        type={"text" as const}
                      />
                    </div>
                  ) : null}
                </Tilt>
              </SupabaseGrid>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navBar", "supabaseGrid", "tilt", "text"],
  navBar: ["navBar"],
  supabaseGrid: ["supabaseGrid", "tilt", "text"],
  tilt: ["tilt"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  supabaseGrid: typeof SupabaseGrid;
  tilt: typeof Tilt;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompletedGallery__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompletedGallery__VariantsArgs;
    args?: PlasmicCompletedGallery__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompletedGallery__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCompletedGallery__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedGallery__ArgProps,
      internalVariantPropNames: PlasmicCompletedGallery__VariantProps,
    });

    return PlasmicCompletedGallery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedGallery";
  } else {
    func.displayName = `PlasmicCompletedGallery.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedGallery = Object.assign(
  // Top-level PlasmicCompletedGallery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    supabaseGrid: makeNodeComponent("supabaseGrid"),
    tilt: makeNodeComponent("tilt"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCompletedGallery
    internalVariantProps: PlasmicCompletedGallery__VariantProps,
    internalArgProps: PlasmicCompletedGallery__ArgProps,
  }
);

export default PlasmicCompletedGallery;
/* prettier-ignore-end */
