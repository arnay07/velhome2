// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uQ1tStPUiuweYuxMksqyYP
// Component: NnXogWra1SRpr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: IELNbHKEGo49X/component
import { SupabaseQuery } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: 9HJzcZkQQ1CaPj/codeComponent
import { SupabaseGridCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: kHDXf1GhHzBrsd/codeComponent
import Post from "../../Post"; // plasmic-import: tjDGBiuBQL-Qm/component
import { SupabaseTextField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: RN0SfBGtQkQfm6/codeComponent
import { SupabaseImgField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: rF1A-J4iicPi5b/codeComponent
import { SupabaseTableCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: y0Nj1q4_1sQUgn/codeComponent

import { useScreenVariants as useScreenVariants_52Cioa0UnGfvY1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 52cioa0UNGfvY1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: uQ1tStPUiuweYuxMksqyYP/projectcss
import sty from "./PlasmicPosts.module.css"; // plasmic-import: NnXogWra1SRpr/css

import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: aZIgskhvJxd7-t/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: bpL7QDrSKQF7Lo/icon

export type PlasmicPosts__VariantMembers = {};

export type PlasmicPosts__VariantsArgs = {};
type VariantPropType = keyof PlasmicPosts__VariantsArgs;
export const PlasmicPosts__VariantProps = new Array<VariantPropType>();

export type PlasmicPosts__ArgsType = {};
type ArgPropType = keyof PlasmicPosts__ArgsType;
export const PlasmicPosts__ArgProps = new Array<ArgPropType>();

export type PlasmicPosts__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  h2?: p.Flex<"h2">;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  supabaseQuery?: p.Flex<typeof SupabaseQuery>;
  supabaseGridCollection?: p.Flex<typeof SupabaseGridCollection>;
  post?: p.Flex<typeof Post>;
  supabaseImgField?: p.Flex<typeof SupabaseImgField>;
  img?: p.Flex<typeof p.PlasmicImg>;
  supabaseTableCollection?: p.Flex<typeof SupabaseTableCollection>;
};

export interface DefaultPostsProps {
  className?: string;
}

export const defaultPosts__Args: Partial<PlasmicPosts__ArgsType> = {};

function PlasmicPosts__RenderFunc(props: {
  variants: PlasmicPosts__VariantsArgs;
  args: PlasmicPosts__ArgsType;
  overrides: PlasmicPosts__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultPosts__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_52Cioa0UnGfvY1(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__mHl3J)}>
          {true ? (
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              component={Link}
              href={"/completed-gallery" as const}
              platform={"nextjs"}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {"Location de vélos entre particuliers"}
                </h2>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </p.PlasmicLink>
          ) : null}

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={"softSand" as const}
            link={"/post/add" as const}
            showStartIcon={true}
            startIcon={
              <PlusIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bLe8P
              )}
            >
              {"Ajouter un vélo"}
            </div>
          </Button>
        </div>
      ) : null}

      <SupabaseQuery
        data-plasmic-name={"supabaseQuery"}
        data-plasmic-override={overrides.supabaseQuery}
        className={classNames("__wab_instance", sty.supabaseQuery)}
        columns={"name, description, id, imageUrl" as const}
        tableName={"entries" as const}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5BvyC)}
          >
            <SupabaseGridCollection
              data-plasmic-name={"supabaseGridCollection"}
              data-plasmic-override={overrides.supabaseGridCollection}
              className={classNames(
                "__wab_instance",
                sty.supabaseGridCollection
              )}
              loading={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__upImw
                    )}
                  >
                    {"You can customize this loading state!"}
                  </div>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_supabase_tutorial_refreshed/images/loadingIconjpeg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1,
                    }}
                  />
                </React.Fragment>
              }
              testLoading={false}
            >
              <Post
                data-plasmic-name={"post"}
                data-plasmic-override={overrides.post}
                className={classNames("__wab_instance", sty.post)}
                description={
                  <SupabaseTextField
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseTextField__gWqd
                    )}
                    name={"{{row.description}}" as const}
                  />
                }
                image={
                  <SupabaseImgField
                    data-plasmic-name={"supabaseImgField"}
                    data-plasmic-override={overrides.supabaseImgField}
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseImgField
                    )}
                    url={"{{row.imageUrl}}" as const}
                  />
                }
                title={
                  <SupabaseTextField
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseTextField__dWZn
                    )}
                    name={"{{row.name}}" as const}
                  />
                }
              />
            </SupabaseGridCollection>

            <SupabaseTableCollection
              data-plasmic-name={"supabaseTableCollection"}
              data-plasmic-override={overrides.supabaseTableCollection}
              className={classNames(
                "__wab_instance",
                sty.supabaseTableCollection
              )}
              columns={"name, description" as const}
              deleteSlot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zeqwy
                  )}
                >
                  {"Placeholder"}
                </div>
              }
              editSlot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l7Uqm
                  )}
                >
                  {"Placeholder"}
                </div>
              }
              loading={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uxCwU
                  )}
                >
                  {"Loading..."}
                </div>
              }
            />
          </p.Stack>
        ) : null}
      </SupabaseQuery>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "h2",
    "button",
    "svg",
    "supabaseQuery",
    "supabaseGridCollection",
    "post",
    "supabaseImgField",
    "img",
    "supabaseTableCollection",
  ],
  link: ["link", "h2"],
  h2: ["h2"],
  button: ["button", "svg"],
  svg: ["svg"],
  supabaseQuery: [
    "supabaseQuery",
    "supabaseGridCollection",
    "post",
    "supabaseImgField",
    "img",
    "supabaseTableCollection",
  ],
  supabaseGridCollection: [
    "supabaseGridCollection",
    "post",
    "supabaseImgField",
    "img",
  ],
  post: ["post", "supabaseImgField"],
  supabaseImgField: ["supabaseImgField"],
  img: ["img"],
  supabaseTableCollection: ["supabaseTableCollection"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  h2: "h2";
  button: typeof Button;
  svg: "svg";
  supabaseQuery: typeof SupabaseQuery;
  supabaseGridCollection: typeof SupabaseGridCollection;
  post: typeof Post;
  supabaseImgField: typeof SupabaseImgField;
  img: typeof p.PlasmicImg;
  supabaseTableCollection: typeof SupabaseTableCollection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPosts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPosts__VariantsArgs;
    args?: PlasmicPosts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPosts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPosts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPosts__ArgProps,
      internalVariantPropNames: PlasmicPosts__VariantProps,
    });

    return PlasmicPosts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPosts";
  } else {
    func.displayName = `PlasmicPosts.${nodeName}`;
  }
  return func;
}

export const PlasmicPosts = Object.assign(
  // Top-level PlasmicPosts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    h2: makeNodeComponent("h2"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    supabaseQuery: makeNodeComponent("supabaseQuery"),
    supabaseGridCollection: makeNodeComponent("supabaseGridCollection"),
    post: makeNodeComponent("post"),
    supabaseImgField: makeNodeComponent("supabaseImgField"),
    img: makeNodeComponent("img"),
    supabaseTableCollection: makeNodeComponent("supabaseTableCollection"),

    // Metadata about props expected for PlasmicPosts
    internalVariantProps: PlasmicPosts__VariantProps,
    internalArgProps: PlasmicPosts__ArgProps,
  }
);

export default PlasmicPosts;
/* prettier-ignore-end */
