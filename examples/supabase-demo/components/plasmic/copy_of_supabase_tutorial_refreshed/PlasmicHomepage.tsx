// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uQ1tStPUiuweYuxMksqyYP
// Component: cMa4emrNERY11
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: _URXLOJYdHqND/component
import { SupabaseUserSession } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: AIwu2cAmNNaSa1/codeComponent
import { RedirectIf } from "../../CodeComponents/LogicComponents"; // plasmic-import: lR5HA2TeRWnzzH/codeComponent
import Button from "../../Button"; // plasmic-import: IELNbHKEGo49X/component
import { SupabaseQuery } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: 9HJzcZkQQ1CaPj/codeComponent
import { SupabaseGridCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: kHDXf1GhHzBrsd/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import Post from "../../Post"; // plasmic-import: tjDGBiuBQL-Qm/component
import { SupabaseTextField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: RN0SfBGtQkQfm6/codeComponent
import { SupabaseImgField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: rF1A-J4iicPi5b/codeComponent
import { SupabaseTableCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: y0Nj1q4_1sQUgn/codeComponent
import { SupabaseEditButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: Ul0_n79AI7BZ7d/codeComponent
import { SupabaseDeleteButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: Xj0xiZm97ZmiDp/codeComponent
import { SupabaseMutation } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: -f1Kq0-fPBNYLK/codeComponent
import { SupabaseModal } from "../../CodeComponents/UtilsComponents"; // plasmic-import: YQpDcYc8zDO5Pn/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: uQ1tStPUiuweYuxMksqyYP/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: cMa4emrNERY11/css

import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: aZIgskhvJxd7-t/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: bpL7QDrSKQF7Lo/icon
import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: suBvJwr0Ww3-mq/icon
import DeleteIcon from "./icons/PlasmicIcon__Delete"; // plasmic-import: xN2AyMzwK-27Uz/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  supabaseUserSession?: p.Flex<typeof SupabaseUserSession>;
  redirectIf?: p.Flex<typeof RedirectIf>;
  supabaseQuery?: p.Flex<typeof SupabaseQuery>;
  supabaseGridCollection?: p.Flex<typeof SupabaseGridCollection>;
  tilt?: p.Flex<typeof Tilt>;
  post?: p.Flex<typeof Post>;
  img?: p.Flex<typeof p.PlasmicImg>;
  supabaseTableCollection?: p.Flex<typeof SupabaseTableCollection>;
  supabaseEditButton?: p.Flex<typeof SupabaseEditButton>;
  supabaseDeleteButton?: p.Flex<typeof SupabaseDeleteButton>;
  supabaseMutation?: p.Flex<typeof SupabaseMutation>;
  supabaseModal?: p.Flex<typeof SupabaseModal>;
};

export interface DefaultHomepageProps {}

export const defaultHomepage__Args: Partial<PlasmicHomepage__ArgsType> = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHomepage__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <SupabaseUserSession
            data-plasmic-name={"supabaseUserSession"}
            data-plasmic-override={overrides.supabaseUserSession}
            className={classNames("__wab_instance", sty.supabaseUserSession)}
          >
            <RedirectIf
              data-plasmic-name={"redirectIf"}
              data-plasmic-override={overrides.redirectIf}
              className={classNames("__wab_instance", sty.redirectIf)}
              leftExpression={"{{session.email}}" as const}
              operator={"FALSY" as const}
              redirectUrl={"/login-page" as const}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qbk1S)}>
                <Button
                  className={classNames("__wab_instance", sty.button__ikK5)}
                  color={"green" as const}
                  link={"/post/add" as const}
                  showStartIcon={true}
                  startIcon={
                    <PlusIcon
                      className={classNames(projectcss.all, sty.svg__jGpXn)}
                      role={"img"}
                    />
                  }
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___56FHi
                      )}
                    >
                      {"Ajouter un v√©lo"}
                    </div>
                  ) : null}
                </Button>

                <SupabaseQuery
                  data-plasmic-name={"supabaseQuery"}
                  data-plasmic-override={overrides.supabaseQuery}
                  className={classNames("__wab_instance", sty.supabaseQuery)}
                  columns={"name, description, id, imageUrl" as const}
                  tableName={"entries" as const}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qLiSx)}
                    >
                      <SupabaseGridCollection
                        data-plasmic-name={"supabaseGridCollection"}
                        data-plasmic-override={overrides.supabaseGridCollection}
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseGridCollection
                        )}
                        loading={
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yuCeT
                              )}
                            >
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cEbv
                                  )}
                                >
                                  <p.PlasmicImg
                                    data-plasmic-name={"img"}
                                    data-plasmic-override={overrides.img}
                                    alt={""}
                                    className={classNames(sty.img)}
                                    displayHeight={"auto" as const}
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"160px" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"auto" as const}
                                    loading={"lazy" as const}
                                    src={{
                                      src: "/plasmic/copy_of_supabase_tutorial_refreshed/images/loadingIconjpeg.svg",
                                      fullWidth: 150,
                                      fullHeight: 150,
                                      aspectRatio: 1,
                                    }}
                                  />
                                </div>
                              ) : null}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mcCC
                                )}
                              >
                                {
                                  "Loading‚Ä¶\nIf this persists, please log in to the application first.\nYou can customize this loading state!"
                                }
                              </div>
                            </p.Stack>
                          ) : null
                        }
                      >
                        <Tilt
                          data-plasmic-name={"tilt"}
                          data-plasmic-override={overrides.tilt}
                          className={classNames("__wab_instance", sty.tilt)}
                          glareBorderRadius={"16" as const}
                          glareEnable={true}
                          glareMaxOpacity={0.075 as const}
                          glareReverse={true}
                          tiltMaxAngleX={3 as const}
                          tiltMaxAngleY={3 as const}
                        >
                          <Post
                            data-plasmic-name={"post"}
                            data-plasmic-override={overrides.post}
                            className={classNames("__wab_instance", sty.post)}
                            description={
                              <SupabaseTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.supabaseTextField__eO87D
                                )}
                                name={"{{row.description}}" as const}
                              />
                            }
                            image={
                              true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__i0IF5
                                  )}
                                >
                                  <SupabaseImgField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.supabaseImgField__kIkn1
                                    )}
                                    url={"{{row.imageUrl}}" as const}
                                  />
                                </div>
                              ) : null
                            }
                            title={
                              <SupabaseTextField
                                className={classNames(
                                  "__wab_instance",
                                  sty.supabaseTextField__ycUqv
                                )}
                                name={"{{row.name}}" as const}
                              />
                            }
                          />
                        </Tilt>
                      </SupabaseGridCollection>

                      <SupabaseTableCollection
                        data-plasmic-name={"supabaseTableCollection"}
                        data-plasmic-override={
                          overrides.supabaseTableCollection
                        }
                        canDelete={true}
                        canEdit={true}
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseTableCollection
                        )}
                        columns={"name, description" as const}
                        deleteSlot={
                          <SupabaseDeleteButton
                            data-plasmic-name={"supabaseDeleteButton"}
                            data-plasmic-override={
                              overrides.supabaseDeleteButton
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.supabaseDeleteButton
                            )}
                            id={"{{row.id}}" as const}
                            modal={
                              <SupabaseMutation
                                data-plasmic-name={"supabaseMutation"}
                                data-plasmic-override={
                                  overrides.supabaseMutation
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.supabaseMutation
                                )}
                                filters={[
                                  {
                                    name: "eq",
                                    args: [
                                      { column: "id", value: "{{local.id}}" },
                                    ],
                                  },
                                ]}
                                method={"delete" as const}
                                redirectOnSuccess={"/" as const}
                                tableName={"entries" as const}
                              >
                                <SupabaseModal
                                  data-plasmic-name={"supabaseModal"}
                                  data-plasmic-override={
                                    overrides.supabaseModal
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.supabaseModal
                                  )}
                                  showModal={false}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qVyA2
                                    )}
                                  >
                                    <SupabaseTextField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.supabaseTextField___7Uk8
                                      )}
                                      name={"{{row.name}}" as const}
                                    />

                                    <SupabaseTextField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.supabaseTextField__ehMp4
                                      )}
                                      name={"{{row.description}}" as const}
                                    />

                                    {true ? (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___1IhMz
                                        )}
                                      >
                                        <SupabaseImgField
                                          className={classNames(
                                            "__wab_instance",
                                            sty.supabaseImgField__ensp5
                                          )}
                                          url={"{{row.imageUrl}}" as const}
                                        />
                                      </div>
                                    ) : null}
                                  </div>
                                </SupabaseModal>
                              </SupabaseMutation>
                            }
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__lcPcs
                              )}
                              color={"clear" as const}
                              hideLabel={true}
                              showStartIcon={true}
                              startIcon={
                                <DeleteIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__xnOVg
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          </SupabaseDeleteButton>
                        }
                        editSlot={
                          <SupabaseEditButton
                            data-plasmic-name={"supabaseEditButton"}
                            data-plasmic-override={overrides.supabaseEditButton}
                            className={classNames(
                              "__wab_instance",
                              sty.supabaseEditButton
                            )}
                            editPage={"/post/update/id" as const}
                            id={"{{row.id}}" as const}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__y4Qvv
                              )}
                              color={"clear" as const}
                              hideLabel={true}
                              showStartIcon={true}
                              startIcon={
                                <EditIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__wC9U3
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ph3F5
                                )}
                              >
                                {"Edit"}
                              </div>
                            </Button>
                          </SupabaseEditButton>
                        }
                        loading={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bpvNz
                            )}
                          >
                            {"Loading..."}
                          </div>
                        }
                      />
                    </p.Stack>
                  ) : null}
                </SupabaseQuery>
              </div>
            </RedirectIf>
          </SupabaseUserSession>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "supabaseUserSession",
    "redirectIf",
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "img",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
  ],
  navBar: ["navBar"],
  supabaseUserSession: [
    "supabaseUserSession",
    "redirectIf",
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "img",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
  ],
  redirectIf: [
    "redirectIf",
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "img",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
  ],
  supabaseQuery: [
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "img",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
  ],
  supabaseGridCollection: ["supabaseGridCollection", "tilt", "post", "img"],
  tilt: ["tilt", "post"],
  post: ["post"],
  img: ["img"],
  supabaseTableCollection: [
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
  ],
  supabaseEditButton: ["supabaseEditButton"],
  supabaseDeleteButton: [
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal",
  ],
  supabaseMutation: ["supabaseMutation", "supabaseModal"],
  supabaseModal: ["supabaseModal"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  supabaseUserSession: typeof SupabaseUserSession;
  redirectIf: typeof RedirectIf;
  supabaseQuery: typeof SupabaseQuery;
  supabaseGridCollection: typeof SupabaseGridCollection;
  tilt: typeof Tilt;
  post: typeof Post;
  img: typeof p.PlasmicImg;
  supabaseTableCollection: typeof SupabaseTableCollection;
  supabaseEditButton: typeof SupabaseEditButton;
  supabaseDeleteButton: typeof SupabaseDeleteButton;
  supabaseMutation: typeof SupabaseMutation;
  supabaseModal: typeof SupabaseModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    supabaseUserSession: makeNodeComponent("supabaseUserSession"),
    redirectIf: makeNodeComponent("redirectIf"),
    supabaseQuery: makeNodeComponent("supabaseQuery"),
    supabaseGridCollection: makeNodeComponent("supabaseGridCollection"),
    tilt: makeNodeComponent("tilt"),
    post: makeNodeComponent("post"),
    img: makeNodeComponent("img"),
    supabaseTableCollection: makeNodeComponent("supabaseTableCollection"),
    supabaseEditButton: makeNodeComponent("supabaseEditButton"),
    supabaseDeleteButton: makeNodeComponent("supabaseDeleteButton"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    supabaseModal: makeNodeComponent("supabaseModal"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
