// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uQ1tStPUiuweYuxMksqyYP
// Component: 1nwkPv2QRsjXjT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import { SupabaseUserLogIn } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: BtAmkWDwr4Pm_a/codeComponent
import { FormContextComponent } from "../../CodeComponents/Form"; // plasmic-import: mBmhM2W1BTyu1_/codeComponent
import { FormTextInput } from "../../CodeComponents/Form"; // plasmic-import: NUsTWjb3PzOqdi/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: J9zrw5ApeikFt/component
import Button from "../../Button"; // plasmic-import: IELNbHKEGo49X/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: uQ1tStPUiuweYuxMksqyYP/projectcss
import sty from "./PlasmicLoginPage.module.css"; // plasmic-import: 1nwkPv2QRsjXjT/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: lTuEpwKUST6iVJ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DGsq-C17D8eHoS/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: bpL7QDrSKQF7Lo/icon

export type PlasmicLoginPage__VariantMembers = {};

export type PlasmicLoginPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginPage__VariantsArgs;
export const PlasmicLoginPage__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginPage__ArgsType = {};
type ArgPropType = keyof PlasmicLoginPage__ArgsType;
export const PlasmicLoginPage__ArgProps = new Array<ArgPropType>();

export type PlasmicLoginPage__OverridesType = {
  root?: p.Flex<"div">;
  supabaseUserLogIn?: p.Flex<typeof SupabaseUserLogIn>;
  formContext?: p.Flex<typeof FormContextComponent>;
  text?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  button?: p.Flex<typeof Button>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultLoginPageProps {}

export const defaultLoginPage__Args: Partial<PlasmicLoginPage__ArgsType> = {};

function PlasmicLoginPage__RenderFunc(props: {
  variants: PlasmicLoginPage__VariantsArgs;
  args: PlasmicLoginPage__ArgsType;
  overrides: PlasmicLoginPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultLoginPage__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ighf9)}
          >
            <SupabaseUserLogIn
              data-plasmic-name={"supabaseUserLogIn"}
              data-plasmic-override={overrides.supabaseUserLogIn}
              className={classNames("__wab_instance", sty.supabaseUserLogIn)}
              redirectOnSuccess={"/" as const}
            >
              <FormContextComponent
                data-plasmic-name={"formContext"}
                data-plasmic-override={overrides.formContext}
                className={classNames("__wab_instance", sty.formContext)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sTkF)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ayN63
                        )}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          {"Location de v√©los entre particuliers"}
                        </div>

                        <h2
                          data-plasmic-name={"h2"}
                          data-plasmic-override={overrides.h2}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2
                          )}
                        >
                          {"Connexion"}
                        </h2>
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ytlNo
                        )}
                      >
                        <FormTextInput
                          className={classNames(
                            "__wab_instance",
                            sty.formTextInput__vT5DP
                          )}
                          name={"email" as const}
                        >
                          <TextInput
                            defaultValue={"" as const}
                            placeholder={"Email" as const}
                            type={"email" as const}
                          />
                        </FormTextInput>

                        <FormTextInput
                          className={classNames(
                            "__wab_instance",
                            sty.formTextInput__jCJu
                          )}
                          name={"password" as const}
                        >
                          <TextInput
                            placeholder={"Mot de passe" as const}
                            type={"password" as const}
                          />
                        </FormTextInput>

                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={"green" as const}
                        >
                          {"Connexion"}
                        </Button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </FormContextComponent>
            </SupabaseUserLogIn>

            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              component={Link}
              href={"/signup-page" as const}
              platform={"nextjs"}
            >
              {"Vous avez besoins d'un compte? Inscrivez-vous ici"}
            </p.PlasmicLink>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "supabaseUserLogIn",
    "formContext",
    "text",
    "h2",
    "button",
    "link",
  ],
  supabaseUserLogIn: [
    "supabaseUserLogIn",
    "formContext",
    "text",
    "h2",
    "button",
  ],
  formContext: ["formContext", "text", "h2", "button"],
  text: ["text"],
  h2: ["h2"],
  button: ["button"],
  link: ["link"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  supabaseUserLogIn: typeof SupabaseUserLogIn;
  formContext: typeof FormContextComponent;
  text: "div";
  h2: "h2";
  button: typeof Button;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginPage__VariantsArgs;
    args?: PlasmicLoginPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginPage__ArgProps,
      internalVariantPropNames: PlasmicLoginPage__VariantProps,
    });

    return PlasmicLoginPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginPage";
  } else {
    func.displayName = `PlasmicLoginPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginPage = Object.assign(
  // Top-level PlasmicLoginPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    supabaseUserLogIn: makeNodeComponent("supabaseUserLogIn"),
    formContext: makeNodeComponent("formContext"),
    text: makeNodeComponent("text"),
    h2: makeNodeComponent("h2"),
    button: makeNodeComponent("button"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicLoginPage
    internalVariantProps: PlasmicLoginPage__VariantProps,
    internalArgProps: PlasmicLoginPage__ArgProps,
  }
);

export default PlasmicLoginPage;
/* prettier-ignore-end */
